\ProvidesPackage{declmath}[2013/08/28 Making symbol indices (Dominique Unruh)]
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{xkeyval}
\RequirePackage{etoolbox}
\RequirePackage{kvoptions}

% \declmath@defwithhashes\xxx{bla}
% is like \def\xxx{bla}
% except that #'s in bla are preserved
\def\declmath@defwithhashes#1#2{%
  \toks@{#2}%
  \edef#1{\the\toks@}%
}


% \declmath@register@key{key}{code}{info-text}
% code will be called with \declmath@key := key and \declmath@value := the assigned value
% Also \declmath@<key>@value will be set and available in the end-function (the last assigned value only)
% If code changes \declmath@value, this will *not* automatically change \declmath@<key>@value.
\newcommand\declmath@register@key[3]{%
  \@ifundefined{declmath@#1@hooks}{%
    \@namedef{declmath@#1@hooks}{}
    \define@key{declmath-keys}{#1}{%
      \@namedef{declmath@key}{#1}%
      \expandafter\declmath@defwithhashes\csname declmath@value\endcsname{##1}%
      \expandafter\declmath@defwithhashes\csname declmath@#1@value\endcsname{##1}%
      \@nameuse{declmath@#1@hooks}%
    }
  }{}
  \expandafter\g@addto@macro\expandafter{\csname declmath@#1@hooks\endcsname}{#2}
  \declmath@register@start{\expandafter\let\csname declmath@#1@value\endcsname\@undefined}
  %
  \typeout{\space\space\space\space key "#1": #3}
}

\def\declmath@start{}
\def\declmath@end{}

% Registers code to be run before the options are processed
\newcommand\declmath@register@start[1]{\g@addto@macro{\declmath@start}{#1}}
% Registers code to be run after the options are processed
\newcommand\declmath@register@end[1]{\g@addto@macro{\declmath@end}{#1}}

% Contains a unique id of the current declaration
\newcount\declmath@id

\DeclareRobustCommand\declare[1]{%
  \advance\declmath@id 1\relax
  \declmath@start
  \setkeys{declmath-keys}{#1}%
  \declmath@end
}


\declmath@register@key{macro}{}{Name of macro to be declared (may also be a non-macro like "+" or "a" or an existing macro, don't use code=... then)}
\declmath@register@key{code}{}{Code of the macro (i.e., does \string\newcommand{macro}{code})}
\declmath@register@key{argspec}{}{Specifies which arguments the macro takes (\string\newcommand-style, like [1][default])}
\declmath@register@key{wrap}{}{Specifies a wrapper for the macro code. 
                               wrap=none uses none.
                               wrap=weakgroup (default) uses \string\begingroup\string\endgroup.
                               wrap=group puts it in a {}-group (allows $a^\string\macro$ instead of $a^{\string\macro}$).}
\declmath@register@key{variable}{}{Indicates that this is a variable, not a mathematical symbol (relevant for conversion to MathML)}
\declmath@register@key{placeholder}{}{Placeholder for this macro in symbol index}
\declmath@register@key{description}{}{Description for this macro in symbolindex}
\declmath@register@key{label}{}{Label to be put where \string\symbolindexmark{...} is called. Do not use this if there are multiple \string\symbolindexmark\space commands for the same symbol}
\declmath@register@key{nopage}{}{nopage=true (or yes/1/anything) will disable warnings if \string\symbolindexmark{\string\macro} is not used}
\declmath@register@key{noindex}{}{noindex=true (or yes/1/anything) will remove this symbol from the index}
\declmath@register@key{variantof}{}{variantof=\string\macro indicates that the symbolindex entry for \string\macro applies to the current macro (current macro has no own index entry)}
\declmath@register@end{%
  \ifx\declmath@macro@value\@undefined\else
  \ifx\declmath@code@value\@undefined\else
  % Calls \newcommand<macro><argspec>{\declmath@wrapper@<wrap>{<code>}}
  \letcs\@tempa{declmath@wrapper@\csuse{declmath@wrap@value}}%
  \ifdef\@tempa{}{\PackageError{declmath/define}{Unknown wrapper wrap=\declmath@wrap@value}{Try, e.g., wrap=group}}%
  \edef\@tempb{\noexpand\newcommand
               \expandonce\declmath@macro@value
               \csuse{declmath@argspec@value}%
               {\@tempa{\expandonce\declmath@code@value}}}%
  \typeout{DECLMATH: define command: \meaning\@tempb}%
  \@tempb
  \fi\fi
  %
  % Allows to look up the \declmath@id of the current definition through the macro name
  \ifx\declmath@macro@value\@undefined\else
    \csxdef{declmath:ref:\expandafter\string\declmath@macro@value}{\number\declmath@id}%
  \fi
}
%
\def\declmath@wrapper@none#1{#1}%
\def\declmath@wrapper@weakgroup#1{\begingroup#1\endgroup}%
\def\declmath@wrapper@group#1{{#1}}%
\let\declmath@wrapper@\declmath@wrapper@weakgroup% default




%
\newwrite\symbolindex@out
\immediate\openout\symbolindex@out=\jobname.syi
%
% \symbolindex@output{key}{value} outputs id.key=value to .syi file
\def\symbolindex@output#1#2{%
  \ifx#2\@undefined\else
  \expandafter\@temptokena\expandafter{#2}%
  \immediate\write\symbolindex@out{\number\declmath@id.#1=\the\@temptokena}\fi
}
%
% contains all defined macros (in the form \symbolindex@warn{id}{macro}{text}), 
% to check in the end whether warnings (with info text based on <macro> <text>) should be issued.
% not: both <macro> and <text> contain only catcode other, not macros
\def\symbolindex@warn@list{}
\AtEndDocument{\symbolindex@warn@list}
\def\symbolindex@warn#1#2#3{\@ifundefined{symbolindex@marked@#1}{%
    \PackageWarning{declmath/symbolindex}{Place of definition for #2 #3 not marked. Use \string\symbolindexmark{#2} at that location (or declare with nopage=yes)}}{}}%
%
\declmath@register@end{%
  % output all data for makesymind.py
  \symbolindex@output{macro}\declmath@macro@value
  \symbolindex@output{code}\declmath@code@value
  \symbolindex@output{description}\declmath@description@value
  \symbolindex@output{placeholder}\declmath@placeholder@value
  \symbolindex@output{noindex}\declmath@noindex@value
  \symbolindex@output{variantof}\declmath@variantof@value
  % essentially \def\symbolindex@mark@xxx{\symbolindex@writemark{id}\label{label}}
  % where xxx is a textual representation of the currently defined macro
  \ifx\declmath@macro@value\@undefined\else
    \expandafter\def\expandafter\@tempa\expandafter{\declmath@macro@value}%
    \edef\@tempa{\noexpand\@namedef{symbolindex@mark@\expandafter\strip@prefix\meaning\@tempa}{\noexpand\symbolindex@writemark{\number\declmath@id}\ifx\declmath@label@value\@undefined\else\noexpand\label{\declmath@label@value}\fi}}%
    \@tempa
    % Register macro to enable warning if unmarked, unless nopage=...
    % (by adding \symbolindex@warn{id}{macro}{text} to \symbolindex@warn@list
    %  with text := "macro (id: id)")
    \ifx\declmath@nopage@value\@undefined
      \expandafter\def\expandafter\@tempa\expandafter{\declmath@macro@value}%
      \edef\@tempa{\noexpand\g@addto@macro\noexpand\symbolindex@warn@list
                   {\noexpand\symbolindex@warn{\number\declmath@id}{%
                       \expandafter\strip@prefix\meaning\@tempa}{(id: \number\declmath@id)}}}%
      \@tempa
    \fi
  \fi
}
%
\newcounter{symbolindexmark}
%
% \symbolindex@writemark{id}:
% writes id.page=pageno,symbolindexmark (two counter values) to .syi-file
% and creates a label symbolindexmark--symbolindex at current position
% and marks the current macro as marked (for \symbolindex@warn)
\def\symbolindex@writemark#1{%
  \refstepcounter{symbolindexmark}%
  % create label
  \expandafter\label\expandafter{\number\c@symbolindexmark--symbolindex}%
  % output to .syi-file
  \edef\@tempa{\noexpand\write\noexpand\symbolindex@out{#1.page=\noexpand\thepage,\number\c@symbolindexmark}}%
  \@tempa
  % marks as marked
  \global\@namedef{symbolindex@marked@#1}{yes}%
}
%
% \symbolindexmark{\macro}{tex}
% registers current position as the place where \macro is defined (linked in symbol index)
% (by calling \symbolindex@writemark{id} for that macro)
% The second argument is just rendered, possibly highlighted using \symbolindexmarkhighlight
\DeclareRobustCommand\symbolindexmark[2]{%
  \symbolindexmarkonly{#1}%
  \symbolindexmarkhighlight{#2}%
}
\DeclareRobustCommand\symbolindexmarkonly[1]{%
  % \@tempa
  \def\@tempa{#1}%
  \@ifundefined{symbolindex@mark@\expandafter\strip@prefix\meaning\@tempa}{%
    \toks@{#1}%
    \PackageError{declmath/symbolindex}{Undeclared math symbol \the\toks@}{Declare it with \string\declare{macro=\the\toks@, ...}}%
  }{\@nameuse{symbolindex@mark@\expandafter\strip@prefix\meaning\@tempa}}%
}
%
% \symbolindexentry{id}{symbol}{description}{pages}
\newcommand\symbolindexentry[4]{\noindent\hbox{\hbox to 1.3in{$#2$\hfill}\parbox[t]{3.5in}{#3}\hbox to 1cm{\hfill #4}}\\[2pt]}
\newenvironment{thesymbolindex}{\section*{Symbol index}\begin{center}}{\end{center}}
%\newcommand\symbolindexentry[4]{$#2$&#3&#4\\}
%\newenvironment{thesymbolindex}{\begin{tabularx}{\hsize}{lXl}}{\end{tabularx}}
\newcommand\symbolindexpage[2]{\ifx\hyperref\@undefined#1\else\hyperref[#2]{#1}\fi}
\newcommand\printsymbolindex{{%
    \makeatletter
    \begin{thesymbolindex}%
      \InputIfFileExists{\jobname.sdx}{}{\PackageWarning{declmath}{\jobname.sdx not found. Did you run makesymind.pl?}}%
    \end{thesymbolindex}%
  }}


\def\symbolindexmarkhighlight#1{#1}


\ProcessKeyvalOptions*



%%% Local Variables:
%%% mode: latex
%%% coding: latin-1
%%% TeX-master: "ghost"
%%% End:
%%% Local IspellDict: american
